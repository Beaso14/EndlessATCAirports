# this is an example config for the cifp parser written by Captain Tux - https://github.com/CaptainTux
# the latest version will be available at https://github.com/AdamJCavanaugh/EndlessATCAirports

# make sure you rename this file to cifp_config.ini

# this is a parser for the CIFP, published by the FAA
# it provides SIDS and STARS for airports in the USA for EndlessATC
# it also generates routes to final, i.e., procedures where pilots navigate to final from an IAF
# the download of the current version is available here:
# https://www.faa.gov/air_traffic/flight_info/aeronav/digital_products/cifp/download/


# make sure to change this to point at the right file (relative path works)
[CIFP_FILENAME]
filename = CIFP/FAACIFP18

# pretty self explanatory, apch_default_top_alt is used for approaches starting at an IAF, so not for STARS
[defaults]
star_default_top_alt = 14000
star_default_top_speed = 250
apch_default_top_alt = 6000
max_approach_alt = 2500
max_approach_speed = 220

# pretty self explanatory, define entrypoints with bearing, minimum altitude and speed
# entries should look like this: HAARP = {'bearing': 330, 'alt': 6000, 'speed': 220}
[entrypoints]
jiims = {"bearing": 140, "alt": 8000, "speed": 220}
vcn = {"bearing": 140, "alt": 8000, "speed": 220}
tragg = {"bearing": 300, "alt": 8000, "speed": 220}
paats = {"bearing": 220, "alt": 9000, "speed": 220}
anmar = {"bearing": 360, "alt": 9000, "speed": 220}

# aircraft on an approach procedure will go no faster than alt_min_speeds[a] if the crossing restriction is aob a
[alt_min_speeds]
7000 = 220
3000 = 200

# specify final approach fixes with final altitude, speed and distance from the airport to intercept the ILS
# some final fixes on published charts might be too close to the airport
# in those cases aircraft might not be able to fly the approach in EATC, so you have to specify your own fixes
# often the last fix before the FAF should be sufficient (this is usually around 10 miles out)
# entries should look like this: ROSLY = {'final_length': 9.5, 'alt': 1800, 'speed': 200}
[final_app_fixes]
obeke = {"final_length": 10, "alt": 2100, "speed": 200}
asoci = {"final_length": 10, "alt": 1800, "speed": 200}
cowad = {"final_length": 10, "alt": 2000, "speed": 200}
holey = {"final_length": 14, "alt": 2000, "speed": 200}
ferin = {"final_length": 10, "alt": 2000, "speed": 200}
festi = {"final_length": 10, "alt": 2600, "speed": 200}
mrtin = {"final_length": 10, "alt": 2100, "speed": 200}
jepug = {"final_length": 10, "alt": 2000, "speed": 200}
amidy = {"final_length": 10, "alt": 1900, "speed": 200}
birke = {"final_length": 10, "alt": 1900, "speed": 200}
zesib = {"final_length": 10, "alt": 1800, "speed": 200}
kehso = {"final_length": 8, "alt": 1400, "speed": 200}
epecu = {"final_length": 8, "alt": 1400, "speed": 200}
awinn = {"final_length": 9, "alt": 1700, "speed": 200}
kahoe = {"final_length": 9, "alt": 2100, "speed": 200}

# replace runway names with your own runway names
# the runway names will consist of the runway prefix (which is specified per airport below)
# followed by the runway name, which you can look up in ./cifp_out/apt_data/cifp_{icao}.csv
# look for the fields which have 'G' in the 'type' column
[replace_runway_names]
kphl_rw08 = KPHL_08_26
kphl_rw26 = KPHL_08_26, rev
kphl_rw09l = KPHL_09L_27R
kphl_rw09r = KPHL_09R_27L
kphl_rw27r = KPHL_09L_27R, rev
kphl_rw27l = KPHL_09R_27L, rev
kphl_rw09b = KPHL_09R_27L
kphl_rw27b = KPHL_09L_27R, rev
kphl_rw17 = KPHL_17_35
kphl_rw35 = KPHL_17_35, rev
kttn_rw06 = KTTN_06_24
kttn_rw24 = KTTN_06_24, rev
kttn_rw16 = KTTN_16_34
kttn_rw34 = KTTN_16_34, rev
kilg_rw01 = KILG_01_19
kilg_rw19 = KILG_01_19, rev
kilg_rw09 = KILG_09_27
kilg_rw27 = KILG_09_27, rev
kilg_rw14 = KILG_14_32
kilg_rw32 = KILG_14_32, rev
kpne_rw06 = KPNE_06_24
kpne_rw24 = KPNE_06_24, rev
kpne_rw15 = KPNE_15_33
kpne_rw33 = KPNE_15_33, rev

